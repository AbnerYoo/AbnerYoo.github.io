{"pages":[],"posts":[{"title":"aria2选项说明--基础选项","text":"以下均根据官方文档及相关翻译整合和梳理 基础选项1-d, --dir=&lt;DIR&gt; 保存下载文件的路径 1-i, --input-file=&lt;FILE&gt; 文件中列出的下载地址。你可以通过在一行上，用TAB分隔多个下载地址，来为一个下载对象指定多源下载。另外，可以在每个源地址后指定选项。 选项行必须以一个或多个空白符（空格或TAB）开头，并且每行只含一个选项置。文件可以使用GZIP压缩. 当文件以-指定, aria2将会从标准输入（stdin）读取。详细信息详见“输入文件（Input File）”章节。 另请参见 --deferred-input 选项。 另请参见 --save-session 选项。 1-l, --log=&lt;LOG&gt; 日志文件的文件名。 如果被指定为 - ，日志将以标准输出（stdout）。如果指定为空字符串（“”），或者省略该选项，日志不会写入到磁盘上。 1-j, --max-concurrent-downloads=&lt;N&gt; 设置每个队列并行下载的最大数量。另请参见 --split option。 默认: 5 --max-concurrent-downloads 限制同时下载的项目数量。 --split 和 --min-split-size 影响每个项目内部的连接数量。 假设你有这样一个输入文件（参见--input-file option）: http://example.com/foohttp://example.com/bar 这里有两个下载项目。如果配置--max-concurrent-downloads值被设置大于或等于2，aria2能同时下载这些项目。在每个下载项目，你能通过--split 或者 --min-split-size 等来设置连接数。 1-V, --check-integrity [true|false] 通过验证块或完整文件的哈希值来检查文件的完整性。该选项仅对 BitTorrent、带校验和的 Metalink 和（启用 --checksum 选项时）HTTP(S)/FTP 下载有效。如提供的是文件块的校验和，在下载时就可自动校验并重试损坏的部分。换成整文件，就必须等到下载完成才能校验。这取决于文件长度。如果校验失败，文件将被重新下载。如果同时提供了按块的校验值和全文件校验值，那么只会使用块哈希。默认：false 1-c, --continue [true|false] 继续下载一个仅部分完成的文件。使用这个选项来继续下载一个由浏览器或其他程序从开头单线程下载的文件。目前这个选项仅能用于 http(s)/ftp 下载。 1-h, --help[=&lt;TAG&gt;|&lt;KEYWORD&gt;] 帮助信息按照以“#”开头的标签分类。例如，输入--help=#http会得到带#http标签的各选项的用法。如果指定了非标签的词，那么打印名字含这个词的各选项的用法。可用的值有：#basic, #advanced, #http, #https, #ftp, #metalink, #bittorrent, #cookie, #hook, #file, #rpc, #checksum, #experimental, #deprecated, #help, #all。默认：#basic 相关链接 aria2官方文档 aria2指令说明翻译（中文）","link":"/2019/aria2-options-1-basic-option/"},{"title":"【问题处理】GitHub Pages不自动构建","text":"问题现象将编译生成的静态页面PUSH到GitHub仓库后，访问对应页面URL，发现实际展示页面并没有更新，依旧是提交前的内容。 问题分析1.确认PUSH是否成功首先点击GitHub仓库的commitsTab查看提交记录。经确认存在提交记录，且查看对应文件也是最新的内容。那么排除该情况。 2.禁用缓存因为使用了Cloudflare提供的服务，并且开启了缓存功能（虽然想想不太可能缓存逻辑这么傻。。。），但还是尝试在Cloudflare上清理了缓存。有以下两种方式排除缓存影响。 开启开发模式在Cloudflare控制台的Overview视图下，在右侧Quick Actions栏有一个Development Mode开关，开启该功能后即可进入开发模式，会绕过缓存，响应网站的实时更新内容。 清理缓存在Cloudflare控制台的Caching视图下可操作清理缓存。如下图所示，点击Purge Cache功能模块的Purge Everything按钮即可。 经过排除缓存影响后，发现问题仍未解决，排除该情况。 3.查看GitHub Pages构建情况回过头再来看GitHub的提交记录，发现上次的提交记录上有个绿色的勾，点击该图标后显示对应提交检测通过，并且已经被GitHub Pages成功构建。反观这次提交，没有对应的构建信息，那么说明最新的提交未被GitHub Pages构建，进而没有能真正的被部署。基本能确定，是该情况导致了问题。 解决方案经过Google找到了一篇博客文章提到了解决方案解决 GitHub Pages 不自动构建，大意是提交过程中触发了GitHub的某些机制，导致GitHub Pages没有自动构建，这篇文章也提供了相应解决办法。不过因为是单次提交触发机制导致，所以再次提交后也可以触发GitHub Pages自动构建，因此除了该文章提到的方法，更简单的方法可以是稍作修改后再次PUSH，以触发GitHub Pages自动构建。","link":"/2020/github-pages-not-build-automatically/"},{"title":"【小工具手册】时间计算器","text":"什么是时间计算器时间计算器计算两个时间点之间的时间差，可用于日期间隔、纪念日倒计时以及时长计算。 Quick Start 在输入区域选择需要计算的起始、结束的日期和时间。 如果需要对已设置时间进行调整，可在调整区域对对应时间进行加减，省去复杂的单位换算。 设置完成后点击GO按钮进行计算，在输出区域按不同层级显示计算结果，可按需查看。 立即体验！ 界面说明左侧框为输入区域，用来输入需要计算时间间隔的起始时间和结束时间，默认是页面打开时间。右侧区域为计算结果显示区域，分多层级显示计算结果。 输入区域输入区域分为三个部分： 起始：起始日期和时间，以下称起始区域 结束：结束日期和时间，以下称结束区域 调整：参数调整，以下称调整区域 起始区域起始区域是设置计算时间差的起始时间，包括起始日期和起始时间，可通过选择界面进行选择，或直接按格式输入所需日期和时间。 结束区域结束区域与起始区域类似，是设置计算时间差的结束时间，包括结束日期和结束时间。 调整区域`调整区域可对起始区域和结束区域的日期和时间进行再调整，即在原有起始区域和结束区域的日期和时间基础上，进行日期和时间的增加或减少。 输出区域输出区域分为三个部分： 间隔：将时间差计算结果按照不同时间层级整合后显示，以下称间隔区域 分类总计：将时间差计算结果按照不同时间层级分别显示，以下称分类区域 调整结果：将参数调整数据添加到对应时间上的计算结果，以下称调整结果区域 间隔区域间隔区域是将时间差计算结果按“x年x个月x天x小x时x分x秒”的结果进行显示，更接近口语化的表达。 分类区域分类区域是将时间差计算结果，分别以天、小时、分钟和秒进行单位换算后显示。区别于间隔区域，分类区域均表示同一个时间差，只是将时间差以不同的时间单位进行换算后显示。 调整结果区域调整结果区域显示的是将输入区域的起始区域、结束区域的日期和时间与调整区域的值组合后的结果，方便查看调整后的具体日期和时间。 例如，起始区域设置起始日期为2020-01-01，设置起始时间为00:00:00。调整区域设置+1年，那么在调整结果区域的起始时间将显示2021-01-01 00:00:00，年份上进行了+1操作。 使用说明使用说明将会分“不加入调整”和“加入调整”两个场景进行举例。 不加入调整例如按如下设置 起始区域设置起始日期为2020-01-01，设置起始时间为00:00:00 结束区域设置结束日期为2021-02-02，设置结束时间为01:01:01 设置完成后点击GO按钮进行计算 本次计算，就相当于计算2020年1月1日 0点0分0秒到2021年2月2日 1点1分1秒的时间差。 在输出区域显示如下： 加入调整例如按如下设置 起始区域设置起始日期为2020-01-01，设置起始时间为00:00:00 结束区域设置结束日期为2021-02-02，设置结束时间为01:01:01 调整区域设置起始为-1年和-1月，设置结束为+1年和+1月 设置完成后点击GO按钮进行计算 本次计算，就相当于计算2018年12月1日 0点0分0秒到2022年3月2日 1点1分1秒的时间差。 在输出区域显示如下：","link":"/2020/tools-introduction-time-calculator/"},{"title":"Node.js 安装（Windows篇）","text":"本篇文章讲解Node.js在Windows平台的安装和配置 什么是Node.js简单来说，Node.js就是可以使用前端JavaScript语言来编写后端服务的运行环境。它采用的是Google的V8引擎，并且可以跨平台运行。就像是jvm之于Java一样。 什么是npmnpm（全称 Node Package Manager，即“node包管理器”），是Node.js内置的软件包管理器，提供第三方模块的安装、更新和卸载等功能。 下载从官方网站下载最新安装包 版本选择官网有以下两种版本选择 LTS:长期有效版本，兼容老版本的特性，通常下载该版本 Current：最新特性版本，不兼容老版本 考虑稳定性和兼容性，我们选择最新的LTS版本下载即可，这也是官方较为推荐的版本。 安装打开官网下载的安装文件，修改安装路径即可，除非有特殊需求，否则其余选项均默认。 验证安装 验证Node.js输入以下指令，如果返回对应版本号及安装成功 1node -v 验证npm输入以下指令，如果返回对应版本号及安装成功 1npm -v 设置修改Node.js安装完成后，也默认安装了npm，在默认设置下，npm会将缓存及相关文件下载在C盘，这对C盘空间比较宝贵的朋友来说不是很友好。因此，我们还需要修改下缓存路径和全局安装包路径。 在指路径下新建两个文件夹node_global和node_cache 将上面两个文件夹设置到npm中 12npm config set prefix &quot;指定路径\\node_global&quot;npm config set cache &quot;指定路径\\node_cache&quot; 设置环境变量 123456系统变量NODE_PATH=指定路径\\node_global\\node_modules用户变量Path中C:\\Users\\用户名\\AppData\\Roaming\\npm改为：指定路径\\node_global 参考https://zh.wikipedia.org/wiki/Node.jshttps://zh.wikipedia.org/wiki/Npmhttp://www.cnblogs.com/yzadd/p/6547668.html","link":"/2019/nodejs-install-windows/"},{"title":"【Andriod入门】1-Android Studio安装","text":"本篇文章讲解Andriod Studio在Windows平台的安装 安装包下载Andriod Studio的安装包可以从官网进行下载，如果访问速度比较慢，也可以从百度网盘进行下载。网盘链接: https://pan.baidu.com/s/11Q6siAYgyDi5tNYQjZlceg提取码: pmrb 安装首先双击安装包，点击next直至下图界面将Android Virtual Device勾选，如果没有实机调试的话，后续调试可以在这个模拟器上进行。 继续下一步，是选择Andriod Studio的安装位置，这个根据实际情况自行确定。 继续下一步就开始进行安装，安装过程中如果出现其他提示，全部通过即可。 安装完成后点击finsh完成安装，并进行首次运行Andriod Studio。 首次运行首次运行，会出现如下界面询问是否需要导入用户配置，如果是首次安装或者不需要导入，那按下图选择。如果需要导入配置，则选择另一个选项。 点击OK会跳出Andriod Studio加载界面，稍等片刻，会出现如下提示，询问是否需要分享使用过程中的数据，提供给Google用以分析和改进Andriod Studio，这个根据实际情况自行确定。 可能还会出现如下界面，这是由于本地没有或者是Andriod Studio没能关联上本地Andriod SDK，点击Cancel，Andriod Studio会自动下载所需Andriod SDK的列表文件 等到出现如下界面时，表示进入到了首次启动的配置阶段，点击next进行下一步操作 这里会让我们选择Andriod Studio的安装方式，有Standard(标准)和Custom(个性化)，如果没有其他要求，选择Standard即可完成配置，完成Andriod Studio的安装。 如果选择Custom，可继续进行个性化配置。 个性化配置JDK安装选择个性化配置后，首先需要配置的是JDK环境的安装位置。 主题接下来选择Andriod Studio主题 SDK及组件安装建议全部勾选，这些也基本都是后续开发过程中需要的。另外还可以选择Android SDK的安装位置。 模拟器设置这里主要设置模拟器的内存使用量，建议按默认的推荐配置设置。 以上配置完成后，会提示确认界面，确认无误后会进行下载、安装和设置。等待安装结束，Andriod Studio的安装也就完成了，如果需要了解更多Android Studio的使用技巧，可以查阅官方用户指南接下来就可以开启Andriod的开发之旅啦！","link":"/2020/android-studio-install/"},{"title":"aria2选项说明--HTTP/FTP/SFTP选项","text":"以下均根据官方文档及相关翻译整合和梳理 HTTP/FTP/SFTP选项1--all-proxy=&lt;PROXY&gt; 为所有协议的传输使用代理服务器。用 “”（空字串）来覆盖之前定义的代理。您可以使用 --http-proxy，--https-proxy 和 --ftp-proxy 选项为某个协议指定代理服务器。该选项对所有下载有效。代理地址格式[http://][USER:PASSWORD@]HOST[:PORT]。另请参见： 环境（ENVIRONMENT）章节。 如果用户名和密码被内置在了代理地址中，并且还通过–{http,https,ftp,all}-proxy-{user,passwd}选项来指定，这些之后被指定的选项覆盖之前的选项。例如，如果你在aria2.conf配置文件中指定http-proxy-user=myname, http-proxy-passwd=mypass并且在命令行也指定--http-proxy=&quot;http://proxy&quot;， 然后你会得到HTTP代理设置http://proxy带上用户名myname和密码mypass。 另一个例子，如果你在命令行指定--http-proxy=&quot;http://user:pass@proxy&quot; --http-proxy-user=&quot;myname&quot; --http-proxy-passwd=&quot;mypass&quot;，然后你会得到HTTP代理设置http://proxy带上用户名myname和密码mypass。 再一个例子，如果你在命令行指定--http-proxy-user=&quot;myname&quot; --http-proxy-passwd=&quot;mypass&quot; --http-proxy=&quot;http://user:pass@proxy&quot;，然后你会得到HTTP代理设置http://proxy带上用户名user和密码pass。 1--all-proxy-passwd=&lt;PASSWD&gt; 为 --all-proxy 指定密码。 1--all-proxy-user=&lt;USER&gt; 为 --all-proxy 指定用户。 1--checksum=&lt;TYPE&gt;=&lt;DIGEST&gt; 设置校验和。TYPE是哈希类型。可被支持的哈希类型列在aria2c -v的Hash Algorithms。DIGEST是十六进制摘要。例如，像这样设置sha-1十六进制：sha-1=0192ba11326fe2298c8cb4de616f4d4140213838。这个选项只会被应用到HTTP(S)/FTP下载。 1--connect-timeout=&lt;SEC&gt; 设置连接 HTTP/FTP/代理服务器的超时（以秒计）。在连接建立之后，此选项将失效，并以 –timeout 选项替代。默认：==60==。 1--dry-run [true|false] 如果填 true，aria2 仅检查远端文件是否可用而不下载数据。此选项对 HTTP/FTP 下载有效。如果启用，BitTorrent 下载会取消。默认：==false==。 1--lowest-speed-limit=&lt;SPEED&gt; 如果下载速度低于或等于此值（字节/秒），则断开连接。0意味着 aria2 没有最低速度限制。可附加 K 或 M（1K=1024，1M=1024K）。此选项对 BitTorrent 下载无效。默认：==0==。 1-x, --max-connection-per-server=&lt;NUM&gt; 每个下载对单个服务器的最大连接数。默认：==1==。 1--max-file-not-found=&lt;NUM&gt; 如果 aria2 从远端 HTTP/FTP 服务器收到了 NUM 次“文件未找到”状态，且没有得到任何数据，就认为此下载失败。指定 0 来禁用此选项。此选项仅适用于 HTTP/FTP 服务器。重试次数计入--max-tries，所以也应该设置这个选项。默认：==0==。 1-m, --max-tries=&lt;N&gt; 设置重试次数。0 表示不限次数。默认：==5==。 1-k, --min-split-size=&lt;SIZE&gt; aria2 不分割小于 2 * SIZE 字节范围的文件。例如，让我们考虑下载 20MiB 的文件，如果 SIZE 为10M，aria2 可以将文件拆分为2个[0-10MiB]和[10MiB-20MiB]的文件，并使用 2 个源（如果 –split&gt;=2）下载它。如果 SIZE 为 15M，由于 2 * 15M&gt;20MiB，aria2 不会拆分文件并使用 1 个源下载。你可以追加 K 或 M（1K = 1024，1M = 1024K）。可能的值: 1M -1024M。默认: ==20M==。 1--netrc-path=&lt;FILE&gt; 指定 netrc 文件的路径。默认：==$(HOME)/.netrc== netrc 文件的权限必须设置为600.否则，该文件会被忽略。 1-n, --no-netrc [true|false] 禁用 netrc 支持。默认启用。 只有--no-netrc设置为false时，netrc 文件在启动时被读取。所有如果--no-netrc在启动时设置为true，则整个会话期间没有netrc可用。即使使用aria2.changeGlobalOption()来设置--no-netrc=false，也不能启用netrc。 1--no-proxy=&lt;DOMAINS&gt; 指定不应使用代理的主机名、域名或（含或不含CIDR 块的）网络地址列表，以半角逗号 “,”分隔。 对于带有子网掩码的网络地址，IPv4和IPv6地址均起作用。当前实现无法解析URI的主机名来与--no-proxy指定的网络地址做比较。所以仅当URI具有数字IP地址时才有效。 1-o, --out=&lt;FILE&gt; 文件保存名字。此文件将以此名字永久保存在 --dir参数所指定的相对路径下。当 --force-sequential 参数被启用时，此选项被忽略。 不能给 Metalink 或 BitTorrent 下载指定文件名。该选项指定的文件名仅适用于直接使用命令行给 aria2 提供URI地址，而使用--input-file, --force-sequential选项时不生效。 示例： 1&gt;$ aria2c -o myfile.zip &quot;http://mirror1/file.zip&quot; &quot;http://mirror2/file.zip&quot; 1--proxy-method=&lt;METHOD&gt; 设置代理请求方式。请求方式是get或者tunnel。无论该选项如何配置，HTTPS下载始终使用tunnel。默认：==get==。 1-R, --remote-time [true|false] 从 HTTP/FTP 服务器获取远程文件的时间戳，确定其可用时将其应用到本地文件。默认：==false==。 1--reuse-uri [true|false] 如果未使用的 URI 已用完，复用已用过的。默认：==true==。 1--retry-wait=&lt;SEC&gt; 设定重试等待时间。秒数 &gt; 0 时，如果 HTTP 返回 503 错误，aria2 会在 &lt;秒数&gt; 秒后重试下载。默认：==0==。 1--server-stat-of=&lt;FILE&gt; 指定保存的服务器性能配置文件的名称。也可以使用 --server-stat-if 选项加载保存的数据。有关文件格式，参见服务器性能配置文件(Server Performance Profile)。 1--server-stat-if=&lt;FILE&gt; 指定要加载的服务器的性能配置文件的名称。加载的数据将被用在某些 URI 选择器之中，如feedback。参见 --uri-selector 选项。有关文件格式，参见服务器性能配置文件(Server Performance Profile)。 1--server-stat-timeout=&lt;SEC&gt; 指定从上次连接服务器起，弃用性能档案文件的超时（以秒计）。默认：==86400 （24小时）==。 1-s, --split=&lt;N&gt; 使用 N 个连接下载文件。如 N 小于需要下载的 URI 数量，那么将使用所有连接，剩余的 URL 将作为候补。如 N 大于需要下载的 URI 数量，多余的 URL 将用于并行下载。到主机的连接数量受 --max-connection-per-server 选项限制。参见 --min-split-size 选项。默认：==5== 一些 Metalinks 规定连接服务器的数量。aria2 严格遵守。这意味着如果 Metalink 定义的最大连接数小于N，那么 aria2 使用这个最大连接数代替N。 1--stream-piece-selector=&lt;SELECTOR&gt; 指定在 HTTP/FTP 下载中使用的块选择算法。块指的是在并行分块下载中固定长度的分段。如果给定default，aria2选择分块以减少建立连接的数量。 这是个合理的默认行为，因为建立连接是一个昂贵的操作。 如果给定inorder，aria2会选择最小索引的块。索引等于0表示文件的第一个块。 这会在边下边播的场景中十分有用。 --enable-http-pipelining选项有可能有助于减少重新连接的开销。请注意aria2生效了--min-split-size选项，因此对--min-split-size选项有必要指定个合理的值。 如果给定random，aria2将会随机选择块。 像inorder一样，--min-split-size选项也是可以被生效的。如果给定geom，一开始 aria2 像inorder一样选择索引最小的块，但是它会成倍地增加与前一个被选中块之间的空间。这将会减少建立连接的数量，同时还会先下载文件的开头部分。这会在边下边播的场景中十分有用。默认：==default==。 1-t, --timeout=&lt;SEC&gt; 设置超时（以秒计）。默认：==60==。 1--uri-selector=&lt;SELECTOR&gt; 指定 URI 选择算法。可能的值有inorder、 feedback 和 adaptive。如果指定inorder，将以 URI 列表中显示的顺序尝试 URI。如果指定feedback，aria2 将根据先前下载中监测到的下载速度并选择 URI 列表中最快的服务器。此选项也可以有效地跳过死镜像。监测到的下载速度是 --server-stat-of 和 --server-stat-if 选项中提到的服务器性能档案文件的一部分。如果指定adaptive，则从第一个和保留的连接选择最好的镜像。对于附加的连接，将返回未经测试的镜像，并且如果如果它们中的每一个都经过了测试，则返回需要再次测试的镜像。否则，不再选择镜像。如同feedback，此配置使用服务器的性能档案文件。默认：==feedback== 相关链接 aria2官方文档 aria2指令说明翻译（中文）","link":"/2019/aria2-options-2-http-ftp-sftp-option/"},{"title":"Hexo博客搭建之Icarus主题--基础操作篇","text":"安装以下所有安装过程均在Windows平台进行 环境准备如果要使用hexo及相关主题，则需要有Node.js和Git，前往对应官方网站下载最新安装包。 Node.js安装hexo官方要求Node.js版本不低于8.6，并建议使用10.0及以上版本。 官方下载地址： Node.js 具体安装方法可参考Node.js 安装（Windows篇）。 Git安装 Git 下载最新的Windows平台安装包，并使用默认配置安装即可。 安装hexo在Node.js和Git安装完成后，我们便可以安装hexo了。执行以下命令安装hexo： 1npm install -g hexo-cli 构建项目初始化项目hexo安装完成后，我们就可以开始使用hexo搭建博客了。执行以下命令完成博客项目的初始化： 123hexo init 自定义项目名cd 自定义项目名npm install 项目结构简析初始化后的项目结构如下： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes _config.yml该文件是本项目的根配置文件，配置项可参考官方说明文档。 package.json本项目的一些信息，可在这里引入或删除第三方模块。 scaffolds模板文件夹，可参考官方说明进行自定义配置。配置模板可简化生成文章的过程，可将一些固定内容预先编写在模板内。 sourcesource文件夹下默认有_posts，默认生成的文章在_posts下，其余命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。 themes主题文件夹，第三方制作的主题包就放在这个文件夹下，hexo再根据主题包来渲染静态页面 安装主题在博客项目文件夹根目录执行以下命令，将主题包下载到themes文件夹。 1git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 下载完成后，在themes文件夹下就会有Icarus主题的相关文件。接着在博客项目根目录下的_config.yml文件，设置启用Icarus主题： 1theme: icarus 最后，执行启动命令 1hexo s 访问http://localhost:4000即可查看主题效果 由于还未生成主题的相关配置文件，可能在初次运行hexo s命令时，会先生成主题配置文件而不是运行项目。这个情况下，只需要再次执行hexo s即可。 配置友情提醒：在修改配置前先备份原始文件，以防误修改配置后可参考还原。 项目配置项目配置在项目文件夹根目录的_config.yml中进行修改。 在默认配置的基础上，可以根据需要进行修改。本站进行了如下修改: 123456789101112# Sitetitle: 车库Lab-分享最新最特别的小技能subtitle: 分享最新最特别的小技能description: 分享最新最特别的小技能keywords: 车库Lab,G-Lab,技能,互联网,ITauthor: 车库Lablanguage: zh-CN# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://g-lab.xyzpermalink: :year/:title/ permalink默认配置是:year/:month/:day/:title/，这样的设置会在生成静态文件时，把文章按照年/月/日/文件名来放置。我觉得这样会产生太多文件夹，所以就简化为:year/:title/。 主题配置主题配置在项目文件夹根目录的\\themes\\icarus\\_config.yml中进行修改。 favicon图标和logo 12favicon: /images/图标文件名logo: /images/logo文件名 将图标文件和logo文件放置到博客项目source\\images文件夹下。favicon图标可在favicon.io进行制作。logo可在logohub.io或shopify.com 导航栏 12345678910111213141516171819# Navigation bar link settingsnavbar: # Navigation bar menu links menu:- Home: /- Archives: /archives- Categories: /categories- Tags: /tags- About: /about+ 主页: /+ 归档: /archives+ 分类: /categories+ 标签: /tags+ 关于: /about- # Navigation bar links to be shown on the right- links:- Download on GitHub:- icon: fab fa-github- url: 'https://github.com/ppoffice/hexo-theme-icarus' 将菜单按钮进行了汉化，并去除了links链接。有需要的朋友可按需进行个性化修改。 文章展示样式 1234567891011121314151617# Article display settingsarticle: # Code highlight settings highlight: # Code highlight themes # https://github.com/highlightjs/highlight.js/tree/master/src/styles- theme: atom-one-light+ theme: atom-one-dark # Show code copying button clipboard: true # Default folding status of the code blocks. Can be \"\", \"folded\", \"unfolded\" fold: unfolded # Whether to show article thumbnail images- thumbnail: true+ thumbnail: false # Whether to show estimate article reading time readtime: true 第一个是修改文章code样式，可以在highlight.js官网选择合适的样式后，再填入对应样式名称。第二个是关闭文章的缩略图，本站暂时不在文章上放封面图。如果不关闭缩略图，就会在列表上显示默认的图片，清一色的默认图片反倒也不适合，索性先关了吧。 赞赏配置暂时先不挂出赞赏二维码，如果不配置，在页面上会有提示配置赞赏字样，暂时先删除以下配置，即可关闭提示。 12345678910111213141516171819202122232425# Donation entries# https://ppoffice.github.io/hexo-theme-icarus/categories/Donation/donate: - # Donation entry name type: alipay # Qrcode image URL qrcode: '' - # Donation entry name type: wechat # Qrcode image URL qrcode: '' - # Donation entry name type: paypal # Paypal business ID or email address business: '' # Currency code currency_code: USD - # Donation entry name type: patreon # URL to the Patreon page url: '' 文章分享 123456# Share plugin settings# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Shareshare: # Share plugin name- type:+ type: sharejs 配置文章的分享插件，具体可配置项，可参考Icarus官方配置指导。如果博客面向国内，可以和我一样选择sharejs，该插件可分享文章至微信、微博和QQ空间等国内常见的社交平台。 个人简介组件 12345678910111213141516171819202122232425262728293031323334353637widgets: - # Widget name type: profile # Where should the widget be placed, left or right position: left # Author name to be shown in the profile widget author: Your name # Title of the author to be shown in the profile widget author_title: Your title # Author's current location to be shown in the profile widget location: Your location # Path or URL to the avatar to be shown in the profile widget avatar: # Email address for the Gravatar to be shown in the profile widget gravatar: # Whether to show avatar image rounded or square avatar_rounded: false # Path or URL for the follow button follow_link: 'https://github.com/ppoffice' # Links to be shown on the bottom of the profile widget social_links: Github: icon: fab fa-github url: 'https://github.com/ppoffice' Facebook: icon: fab fa-facebook url: 'https://facebook.com' Twitter: icon: fab fa-twitter url: 'https://twitter.com' Dribbble: icon: fab fa-dribbble url: 'https://dribbble.com' RSS: icon: fas fa-rss url: / 以上配置效果，可见下图 12345// 头像图标方形avatar_rounded: false// 头像图标圆形avatar_rounded: true 社交连接图标（social_links的icon）可在fontawesome上挑选。其余配置可参考Icarus官方配置指导。 友链和tag云 1234567891011121314- # Widget name type: links # Where should the widget be placed, left or right position: left # Links to be shown in the links widget links: Hexo: 'https://hexo.io' PPOffice: 'https://github.com/ppoffice'- # Widget name type: tagcloud # Where should the widget be placed, left or right position: left 由于暂时不需要友链（links），所以就先删除了该配置。tag云（tagcloud）和tag组件，我决定保留tag，所以删除了tag云组件配置。所以，以上两个配置均删除。 不蒜子访问量统计组件 1234 # BuSuanZi site/page view counter # https://busuanzi.ibruce.info- busuanzi: false+ busuanzi: true busuanzi设置为true即开启了不蒜子访问量统计组件，在页面的左下角显示站访问量，在文章标题上方显示文章阅读量。 编写文章生成文章在完成以上配置后，在博客项目根目录下执行 1hexo new 文章标题（建议英文名） 即可生成文章文件，默认生成在source\\_posts下，并以上方命令行中的文章标题为文件名。因此建议使用英文名（多个单词间可用“-”或“_”连接）命名文章文件，后续发布博客时也会使用该文件名作为路径（http路径），使用英文名避免一些不必要的麻烦。 编辑文章默认模板内容默认生成文章只有以下内容 1234---title: 文章标题date: 文件生成时间--- title为文件名，建议修改为中文标题，这个标题将会在作为文章标题在博客页面上显示。date是文件生成时间，定义上是文章发表时间，可用按需修改。 自定义模板内容通常我们还需要为文章增加分类信息和标签信息（tag信息）。例如： 123456789101112---title: Hexo博客搭建之Icarus主题date: 2019-10-28 20:30:24tags:- hexo- 博客搭建- Icaruscategories:- 前端- 博客搭建toc: true--- 需要说明的是分类（categories）是有层级的，按照如上配置，表示博客搭建分类在前端分类下。toc表示开启本篇文章的目录组件，但是前提是主题配置中也启用了目录组件，关于该配置可参考Icarus官方配置指导。其他配置可参考hexo官方文档。 文章正文文章采用markdown语法编写，同时还可用用hexo的标签插件来增加更多的样式。 需要注意的是，在Icarus主题中，默认在文章列表显示的是文章全文，如果需要在文章列表只显示文章部分内容，那么需要在文章正文加上&lt;!-- more --&gt;。这样，在&lt;!-- more --&gt;之前的内容将会在列表显示。详细说明，参考hexo官方文档 运行在完成以上配置后，在博客项目根目录下执行 1hexo s 即可在localhost:4000访问你的博客啦！如果需要生成静态页面文件，则执行： 12hexo cleanhexo g 先进行文件的清理，然后生成新的静态页面文件，生成的文件位置默认在博客项目根目录的public文件夹内。 以上就是使用hexo并采用Icarus主题搭建博客的基本操作。下一篇，我们将对博客进行一些个性化的修改，敬请期待！ 参考https://hexo.io/zh-cn/https://blog.zhangruipeng.me/hexo-theme-icarus/","link":"/2019/hexo-icarus-build-blog-get-started/"},{"title":"Hexo博客搭建之Icarus主题--个性化修改篇","text":"在Hexo博客搭建之Icarus主题--基础操作篇中，介绍了使用Hexo搭配Icarus主题来搭建博客的基础操作。但是，默认样式和功能可能不能满足挑剔的各位，那么接下来我们就来进行一些个性化的调整，来打造独一无二的博客。 布局个性化文章页三栏布局改两栏布局在默认主题配置下，文章页是三栏布局，中间文章栏显得有些窄。于是，聪明的你们肯定会把所有边栏组件配置到同一侧，但是你会发现，首页也变成了两栏。那么我们就来个性化修改下，在首页还保持三栏的效果，在文章页时呈现两栏效果。 themes\\icarus\\includes\\helpers\\layout.js12345678910 hexo.extend.helper.register('column_count', function () { let columns = 1;+ if (this.page.__post === true || this.page.__page === true) {+ return 2;+ } const hasColumn = hexo.extend.helper.get('has_column').bind(this); columns += hasColumn('left') ? 1 : 0; columns += hasColumn('right') ? 1 : 0; return columns; }); themes\\icarus\\layout\\common\\widget.ejs12345678 &lt;% if (position === 'left') { %&gt;- &lt;div class=\"column-right-shadow is-hidden-widescreen &lt;%= sticky_class('right') %&gt;\"&gt;+ &lt;div class=\"column-right-shadow &lt;%= (page.__page !== true &amp;&amp; page.__post !== true) ? 'is-hidden-widescreen' : '' %&gt; &lt;%= sticky_class('right') %&gt;\"&gt; &lt;% get_widgets('right').forEach(widget =&gt; {%&gt; &lt;%- _partial('widget/' + widget.type, { widget }) %&gt; &lt;% }) %&gt; &lt;/div&gt; &lt;% } %&gt; themes\\icarus\\layout\\layout.ejs1234567891011 &lt;section class=\"section\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"columns\"&gt; &lt;div class=\"column &lt;%= main_column_class() %&gt; has-order-2 column-main\"&gt;&lt;%- body %&gt;&lt;/div&gt; &lt;%- _partial('common/widget', { position: 'left' }) %&gt;+ &lt;% if (page.__page !== true &amp;&amp; page.__post !== true) { %&gt; &lt;%- _partial('common/widget', { position: 'right' }) %&gt;+ &lt;% } %&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; 文章栏加宽在完成以上操作后，首页依旧三栏布局，在文章页则是两栏布局。但是，文章页虽然是两栏，可文章栏宽度仍旧和之前一样，那么接下来，我们就改变下文章栏的宽度。 themes\\icarus\\layout\\layout.ejs123456789101112 &lt;% function main_column_class() { switch (column_count()) { case 1: return 'is-12'; case 2:- return 'is-8-tablet is-8-desktop is-8-widescreen';+ return 'is-8-tablet is-9-desktop is-9-widescreen'; case 3: return 'is-8-tablet is-8-desktop is-6-widescreen' } return ''; } %&gt; themes\\icarus\\layout\\common\\widget.ejs1234567891011 &lt;% if (get_widgets(position).length) { %&gt; &lt;% function side_column_class() { switch (column_count()) { case 2:- return 'is-4-tablet is-4-desktop is-4-widescreen';+ return 'is-4-tablet is-3-desktop is-3-widescreen'; case 3: return 'is-4-tablet is-4-desktop is-3-widescreen'; } return ''; } %&gt; themes\\icarus\\source\\css\\style.styl12345678910111213141516171819 body, button, input, select, textarea font-family: family-sans -@media screen and (min-width: screen-widescreen)- .is-1-column .container- .is-2-column .container- max-width: screen-desktop - 2 * gap- width: screen-desktop - 2 * gap-@media screen and (min-width: screen-fullhd)- .is-2-column .container- max-width: screen-widescreen - 2 * gap- width: screen-widescreen - 2 * gap- .is-1-column .container- max-width: screen-desktop - 2 * gap- width: screen-desktop - 2 * gap @media screen and (max-width: screen-tablet - 1) .section padding: 1.5rem 1rem 文章图片居中Icarus主题使用的是hexo默认的hexo-renderer-marked，在文章内引入图片时，图片是靠左的样式显示。所以，我们还需要修改下图片样式，使其居中显示。 themes\\icarus\\source\\css\\style.styl123456789101112131415.article .article-meta margin-bottom: 0.5rem !important .content font-size: 1.1rem blockquote.pullquote float: right max-width: 50% font-size: 1.15rem position: relative a word-wrap: break-word+ img+ margin: auto+ display: block 文章版权信息themes\\icarus\\_config.yml123+ # 版权信息+ copyright:+ enable: true # true：开启版权信息；false：关闭版权信息 themes\\icarus\\layout\\common\\article.ejs1234567891011121314151617181920 &lt;div class=\"content\"&gt; &lt;%- index &amp;&amp; post.excerpt ? post.excerpt : post.content %&gt; &lt;/div&gt;+ &lt;% if (!index &amp;&amp; post.layout === 'post' &amp;&amp; post.copyright !== false &amp;&amp; theme.copyright.enable) { %&gt;+ &lt;ul class=\"post-copyright\"&gt;+ &lt;li&gt;&lt;strong&gt;本文标题：&lt;/strong&gt;&lt;a href=\"&lt;%= post.permalink %&gt;\"&gt;&lt;%= page.title %&gt;&lt;/a&gt;&lt;/li&gt;+ &lt;li&gt;&lt;strong&gt;本文作者：&lt;/strong&gt;&lt;a href=\"&lt;%= theme.url %&gt;\"&gt;&lt;%= theme.author %&gt;&lt;/a&gt;&lt;/li&gt;+ &lt;li&gt;&lt;strong&gt;本文链接：&lt;/strong&gt;&lt;a href=\"&lt;%= post.permalink %&gt;\"&gt;&lt;%= post.permalink %&gt;&lt;/a&gt;&lt;/li&gt;+ &lt;li&gt;&lt;strong&gt;发布时间：&lt;/strong&gt;&lt;%= post.date.format(\"YYYY-MM-DD\") %&gt;&lt;/li&gt;+ &lt;li&gt;&lt;strong&gt;版权声明：&lt;/strong&gt;本博客所有文章除特别声明外，均采用 &lt;a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" rel=\"external nofollow\" target=\"_blank\"&gt;CC BY-NC-SA 4.0&lt;/a&gt; 许可协议。转载请注明出处！+ &lt;/li&gt;+ &lt;/ul&gt;+ &lt;% } %&gt; &lt;% if (!index &amp;&amp; post.tags &amp;&amp; post.tags.length) { %&gt;+ &lt;hr style=\"height:1px;margin:1rem 0\"/&gt; &lt;div class=\"level is-size-7 is-uppercase\"&gt; &lt;div class=\"level-start\"&gt; &lt;div class=\"level-item\"&gt; &lt;span class=\"is-size-6 has-text-grey has-mr-7\"&gt;#&lt;/span&gt; &lt;%- list_tags(post.tags, { themes\\icarus\\source\\css\\style.styl1234567891011+/* ---------------------------------+ * 版权信息+ * --------------------------------- */ +.post-copyright+ font-size: 1rem+ letter-spacing: 0.02rem+ word-break: break-all+ margin: 2.5rem 0 0+ padding: 1rem 1rem+ border-left: 3px solid #FF1700+ background-color: #F9F9F9 浮动显示公众号二维码在个人简介插件上的社交图标都是链接点击形式的，想加上公众号的话这样的形式不太合适，因此改造成移动至图标浮动显示二维码。 themes\\icarus\\layout\\widget\\profile.ejs12345678910111213141516171819202122232425262728293031323334 &lt;% const socialLinks = get_config_from_obj(widget, 'social_links'); %&gt; &lt;% if (socialLinks !== null) { %&gt; &lt;div class=\"level is-mobile\"&gt; &lt;% for (let name in socialLinks) { let link = socialLinks[name]; %&gt;- &lt;a class=\"level-item button is-white is-marginless\" target=\"_blank\"- title=\"&lt;%= name %&gt;\" href=\"&lt;%= url_for(typeof(link) === 'string' ? link : link.url) %&gt;\"&gt;- &lt;% if (typeof(link) === 'string') { %&gt;- &lt;%= name %&gt;- &lt;% } else { %&gt;- &lt;i class=\"&lt;%= link.icon %&gt;\"&gt;&lt;/i&gt;- &lt;% } %&gt;- &lt;/a&gt;+ &lt;% if (typeof(link) !== 'string' &amp;&amp; link.qrcode) { %&gt;+ &lt;a class=\"level-item button is-white donate is-marginless\"+ title=\"&lt;%= name %&gt;\" href=\"javascript:void(0)\"&gt; + &lt;i class=\"&lt;%= link.icon %&gt;\"&gt;&lt;/i&gt;+ &lt;div class=\"qrcode\"&gt;&lt;img src=\"&lt;%= url_for(link.qrcode) %&gt;\" alt=\"&lt;%= name %&gt;\"&gt;&lt;/div&gt;+ &lt;/a&gt; + &lt;% } else { %&gt;+ &lt;a class=\"level-item button is-white is-marginless\" target=\"_blank\"+ title=\"&lt;%= name %&gt;\" href=\"&lt;%= url_for(typeof(link) === 'string' ? link : link.url) %&gt;\"&gt;+ &lt;% if (typeof(link) === 'string') { %&gt;+ &lt;%= name %&gt;+ &lt;% } else { %&gt;+ &lt;i class=\"&lt;%= link.icon %&gt;\"&gt;&lt;/i&gt;+ &lt;% } %&gt;+ &lt;/a&gt;+ &lt;% } %&gt; &lt;% } %&gt; &lt;/div&gt; &lt;% } %&gt; &lt;/div&gt; &lt;/div&gt; themes\\icarus\\_config.yml1234567891011121314151617181920212223242526widgets: - # Widget name type: profile # Where should the widget be placed, left or right position: left # Author name to be shown in the profile widget author: G-lab # Title of the author to be shown in the profile widget author_title: # Author's current location to be shown in the profile widget location: # Path or URL to the avatar to be shown in the profile widget avatar: /images/avatar.jpg # Email address for the Gravatar to be shown in the profile widget gravatar: # Whether to show avatar image rounded or square avatar_rounded: true # Path or URL for the follow button follow_link: 'https://my.oschina.net/u/2404065' # Links to be shown on the bottom of the profile widget social_links:+ wexin:+ icon: fab fa-weixin+ qrcode: '/images/qrcode_weixin.jpg' # 把微信二维码图片放到source\\images下+ url: '' 站点访问总量显示Icarus主题在使用不蒜子统计插件时，默认只显示访问总量，不显示访客数量。所以我们改造下，让页面也能显示访客数量。通过多语言文件，我们发现Icarus主题是有访客数量的统计的。 1234plugin: backtotop: '回到顶端' visit: '%s次访问' visitor: '共%s个访客' 所以我们改造如下代码 themes\\icarus\\layout\\common\\footer.ejs12345678910111213 &amp;copy; &lt;%= date(new Date(), 'YYYY') %&gt; &lt;%= author || title %&gt;&amp;nbsp; Powered by &lt;a href=\"https://hexo.io/\" target=\"_blank\"&gt;Hexo&lt;/a&gt; &amp; &lt;a href=\"https://github.com/ppoffice/hexo-theme-icarus\" target=\"_blank\"&gt;Icarus&lt;/a&gt; &lt;% if (busuanzi) { %&gt; &lt;br&gt;+ &lt;span id=\"busuanzi_container_site_pv\"&gt;+ &lt;%- _p('plugin.visit', '&lt;span id=\"busuanzi_value_site_pv\"&gt;0&lt;/span&gt;') %&gt;+ &lt;/span&gt; &lt;span id=\"busuanzi_container_site_uv\"&gt; &lt;%- _p('plugin.visitor', '&lt;span id=\"busuanzi_value_site_uv\"&gt;0&lt;/span&gt;') %&gt; &lt;/span&gt; &lt;% } %&gt; &lt;/p&gt; 以上就是对Icarus主题进行的个性化修改。下一篇，我们将对博客进行一些打包和部署的修改，敬请期待！ 参考 https://github.com/ppoffice/hexo-theme-icarus/issues/379 https://github.com/ppoffice/hexo-theme-icarus/issues/386 https://cloudy-liu.github.io/2019/06/23/Hexo主题迁移到icarus","link":"/2019/hexo-icarus-build-customize/"}],"tags":[{"name":"aria2","slug":"aria2","link":"/tags/aria2/"},{"name":"aria2选项","slug":"aria2选项","link":"/tags/aria2%E9%80%89%E9%A1%B9/"},{"name":"aria2配置","slug":"aria2配置","link":"/tags/aria2%E9%85%8D%E7%BD%AE/"},{"name":"问题处理","slug":"问题处理","link":"/tags/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"小工具","slug":"小工具","link":"/tags/%E5%B0%8F%E5%B7%A5%E5%85%B7/"},{"name":"时间计算器","slug":"时间计算器","link":"/tags/%E6%97%B6%E9%97%B4%E8%AE%A1%E7%AE%97%E5%99%A8/"},{"name":"使用手册","slug":"使用手册","link":"/tags/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"},{"name":"后端","slug":"后端","link":"/tags/%E5%90%8E%E7%AB%AF/"},{"name":"Node.js","slug":"Node-js","link":"/tags/Node-js/"},{"name":"安装","slug":"安装","link":"/tags/%E5%AE%89%E8%A3%85/"},{"name":"Andriod","slug":"Andriod","link":"/tags/Andriod/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"博客搭建","slug":"博客搭建","link":"/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"Icarus","slug":"Icarus","link":"/tags/Icarus/"}],"categories":[{"name":"aria2","slug":"aria2","link":"/categories/aria2/"},{"name":"问题处理","slug":"问题处理","link":"/categories/%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"},{"name":"小工具","slug":"小工具","link":"/categories/%E5%B0%8F%E5%B7%A5%E5%85%B7/"},{"name":"后端","slug":"后端","link":"/categories/%E5%90%8E%E7%AB%AF/"},{"name":"配置说明","slug":"aria2/配置说明","link":"/categories/aria2/%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/"},{"name":"Andriod","slug":"Andriod","link":"/categories/Andriod/"},{"name":"Node.js","slug":"后端/Node-js","link":"/categories/%E5%90%8E%E7%AB%AF/Node-js/"},{"name":"前端","slug":"前端","link":"/categories/%E5%89%8D%E7%AB%AF/"},{"name":"博客搭建","slug":"前端/博客搭建","link":"/categories/%E5%89%8D%E7%AB%AF/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]}